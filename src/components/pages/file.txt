<template>
   <layout-div>
      <div class="row justify-content-md-center">
        <div class="col-12">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="container-fluid">
                    <a class="navbar-brand" href="#">Dashboard</a>
                    <div class="d-flex">
                        <ul class="navbar-nav">
                            <li class="nav-item">
                                <a @click="logoutAction()" class="nav-link " aria-current="page" href="#">Logout</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </nav>
            <h2 class="text-center mt-5">Welcome, {{user?.name}}!</h2  >
        </div>
      </div>
   </layout-div>
</template>
  
<script>
import axios from 'axios';
import LayoutDiv from '../LayoutDiv.vue';
  
export default {
  name: 'DashboardPage',
  components: {
    LayoutDiv,
  },
  data() {
    return {
      user: {},
    };
  },
  created() {
    this.getUser();
    if(localStorage.getItem('token') == "" || localStorage.getItem('token') == null){
      this.$router.push('/')
    }else {
      this.getUser();
    }
 
  },
  methods: {
    getUser() {
        axios.get('/api/user', { headers:{Authorization: 'Bearer ' + localStorage.getItem('token')}})
        .then((r) => {
           this.user = r.data;
           return r
        })
        .catch((e) => {
           return e
        });
    },
 
    logoutAction () {
      axios.post('/api/logout',{}, { headers:{Authorization: 'Bearer ' + localStorage.getItem('token')}})
      .then((r) => {
          localStorage.setItem('token', "")
          this.$router.push('/')
          return r
      })
      .catch((e) => {
        return e
      });
    }
 
  },
};
</script>

formatDate(timestamp) {
    if (!timestamp) return "Tanggal tidak tersedia"; // Tangani undefined/null

    console.log("Menerima timestamp:", timestamp); // Debugging

    // Pisahkan tanggal dan waktu berdasarkan koma
    const [datePart, timePart] = timestamp.split(", ");

    if (!datePart || !timePart) return "Format tidak valid"; // Tangani format tidak sesuai

    // Pisahkan hari, bulan, dan tahun
    const [day, month, year] = datePart.split("-").map(Number);
    const [hour, minute, second] = timePart.split(".").map(Number);

    // Buat objek tanggal baru
    const date = new Date(year, month - 1, day, hour, minute, second);

    return date.toLocaleString("id-ID", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      hour12: false,
    }).replace(/\//g, "-");
  },

<-------->
  <template>
  <layout-div>
    <div class="container">
      <h2 class="text-center">Riwayat Peminjaman</h2>

      <!-- Tombol Cetak -->
      <div class="text-end mb-3">
        <button class="btn btn-primary" @click="printAndClear">ðŸ–¨ Cetak</button>
      </div>

      <div id="print-section">
        <div class="table-responsive">
          <table class="table table-bordered table-striped">
            <thead class="table-dark">
              <tr>
                <th>No</th>
                <th>Nama</th>
                <th>Kelas</th>
                <th>Nama Barang</th>
                <th>Jumlah</th>
                <th>Tanggal Dipinjam</th>
                <th>Tanggal Dikembalikan</th>
                <th>Status</th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="(item, index) in riwayat" :key="item.id">
                <td>{{ index + 1 }}</td>
                <td>{{ item.nama }}</td>
                <td>{{ item.kelas }}</td>
                <td>{{ item.namabarang }}</td>
                <td>{{ item.jumlahbarang }}</td>
                <td>{{ item.tanggalDipinjam }}</td>
                <td>{{ item.tanggalDikembalikan }}</td>
                <td style="color: green; text-align: center;"><b>{{ item.status }}</b></td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>

      <p v-if="riwayat.length === 0" class="text-center text-muted">
        ðŸš« Tidak ada riwayat peminjaman yang selesai.
      </p>
    </div>
  </layout-div>
</template>

<script>
import axios from 'axios';
import LayoutDiv from '../LayoutDiv.vue';

export default {
  components: { LayoutDiv },
  data() {
    return {
      riwayat: [],
      refreshInterval: null,
    };
  },
  mounted() {
    this.fetchRiwayat();
    this.startAutoRefresh();
  },
  beforeUnmount() {
    this.stopAutoRefresh();
  },
  methods: {
    async fetchRiwayat() {
      try {
        const { data } = await axios.get(
          'https://29b1ef8a-9650-4e93-aae4-c5dd204ed3f4-00-29uckvoxpfzx3.sisko.replit.dev/riwayat'
        );
        console.log("Data dari API:", data);
        this.riwayat = data;
      } catch (error) {
        console.error('Gagal mengambil data riwayat:', error);
      }
    },

    startAutoRefresh() {
      this.refreshInterval = setInterval(() => {
        this.fetchRiwayat();
      }, 5000);
    },

    stopAutoRefresh() {
      if (this.refreshInterval) {
        clearInterval(this.refreshInterval);
        this.refreshInterval = null;
      }
    },

    async deleteById(id) {
      try {
        await axios.delete(
          `https://29b1ef8a-9650-4e93-aae4-c5dd204ed3f4-00-29uckvoxpfzx3.sisko.replit.dev/riwayat/${id}`
        );
        console.log(`Riwayat dengan ID ${id} berhasil dihapus.`);
      } catch (error) {
        console.error(`Gagal menghapus ID ${id}:`, error.response?.data || error.message);
      }
    },

    async clearAllRiwayat() {
      for (const item of this.riwayat) {
        await this.deleteById(item.id);
      }
      this.riwayat = [];
    },

    async printAndClear() {
      if (this.riwayat.length === 0) {
        alert("ðŸš« Tidak ada data untuk dicetak.");
        return;
      }

      // Simpan konten asli halaman
      const printContent = document.getElementById("print-section").innerHTML;
      const originalContent = document.body.innerHTML;

      // Ganti konten halaman dengan hanya bagian yang dicetak
      document.body.innerHTML = printContent;
      window.print();

      // Kembalikan konten asli setelah cetak
      document.body.innerHTML = originalContent;
      window.location.reload();

      console.log("Menghapus semua data riwayat...");
      await this.clearAllRiwayat();
    }
  }
};
</script>

<style scoped>
.container {
  max-width: 100%;
  margin: auto;
}

.table {
  text-align: center;
}

h2 {
  margin-bottom: 20px;
}
</style>